// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

/*
Package configpb is a generated protocol buffer package.

It is generated from these files:
	config.proto

It has these top-level messages:
	LogBackend
	LogBackendSet
	LogConfigSet
	LogConfig
	LogMultiConfig
*/
package configpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import keyspb "github.com/google/trillian/crypto/keyspb"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LogBackend struct {
	// name defines the name of the log backend for use in LogConfig messages and must be unique.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// backend_spec defines the RPC endpoint that clients should use to send requests
	// to this log backend. These should be in the same format as rpcBackendFlag in the
	// CTFE main and must not be an empty string.
	BackendSpec string `protobuf:"bytes,2,opt,name=backend_spec,json=backendSpec" json:"backend_spec,omitempty"`
}

func (m *LogBackend) Reset()                    { *m = LogBackend{} }
func (m *LogBackend) String() string            { return proto.CompactTextString(m) }
func (*LogBackend) ProtoMessage()               {}
func (*LogBackend) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LogBackend) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LogBackend) GetBackendSpec() string {
	if m != nil {
		return m.BackendSpec
	}
	return ""
}

// LogBackendSet supports a configuration where a single set of frontends handle
// requests for multiple backends. For example this could be used to run different
// backends in different geographic regions.
type LogBackendSet struct {
	Backend []*LogBackend `protobuf:"bytes,1,rep,name=backend" json:"backend,omitempty"`
}

func (m *LogBackendSet) Reset()                    { *m = LogBackendSet{} }
func (m *LogBackendSet) String() string            { return proto.CompactTextString(m) }
func (*LogBackendSet) ProtoMessage()               {}
func (*LogBackendSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LogBackendSet) GetBackend() []*LogBackend {
	if m != nil {
		return m.Backend
	}
	return nil
}

// LogConfigSet is a set of LogConfig messages.
type LogConfigSet struct {
	Config []*LogConfig `protobuf:"bytes,1,rep,name=config" json:"config,omitempty"`
}

func (m *LogConfigSet) Reset()                    { *m = LogConfigSet{} }
func (m *LogConfigSet) String() string            { return proto.CompactTextString(m) }
func (*LogConfigSet) ProtoMessage()               {}
func (*LogConfigSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LogConfigSet) GetConfig() []*LogConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

// LogConfig describes the configuration options for a log instance.
type LogConfig struct {
	LogId        int64                `protobuf:"varint,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
	Prefix       string               `protobuf:"bytes,2,opt,name=prefix" json:"prefix,omitempty"`
	RootsPemFile []string             `protobuf:"bytes,3,rep,name=roots_pem_file,json=rootsPemFile" json:"roots_pem_file,omitempty"`
	PrivateKey   *google_protobuf.Any `protobuf:"bytes,4,opt,name=private_key,json=privateKey" json:"private_key,omitempty"`
	// The public key is included for the convenience of test tools (and obviously
	// should match the private key above); it is not used by the CT personality.
	PublicKey     *keyspb.PublicKey `protobuf:"bytes,5,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
	RejectExpired bool              `protobuf:"varint,6,opt,name=reject_expired,json=rejectExpired" json:"reject_expired,omitempty"`
	ExtKeyUsages  []string          `protobuf:"bytes,7,rep,name=ext_key_usages,json=extKeyUsages" json:"ext_key_usages,omitempty"`
	// not_after_start defines the start of the range of acceptable NotAfter
	// values, inclusive.
	// Leaving this unset implies no lower bound to the range.
	NotAfterStart *google_protobuf1.Timestamp `protobuf:"bytes,8,opt,name=not_after_start,json=notAfterStart" json:"not_after_start,omitempty"`
	// not_after_limit defines the end of the range of acceptable NotAfter values,
	// exclusive.
	// Leaving this unset implies no upper bound to the range.
	NotAfterLimit *google_protobuf1.Timestamp `protobuf:"bytes,9,opt,name=not_after_limit,json=notAfterLimit" json:"not_after_limit,omitempty"`
	// accept_only_ca controls whether or not *only* certificates with the CA bit
	// set will be accepted.
	AcceptOnlyCa bool `protobuf:"varint,10,opt,name=accept_only_ca,json=acceptOnlyCa" json:"accept_only_ca,omitempty"`
	// backend_name if set indicates which backend serves this log. The name must be
	// one of those defined in the LogBackendSet.
	LogBackendName string `protobuf:"bytes,11,opt,name=log_backend_name,json=logBackendName" json:"log_backend_name,omitempty"`
	// no_cert_support controls whether certificates are accepted by the log.
	NoCertSupport bool `protobuf:"varint,12,opt,name=no_cert_support,json=noCertSupport" json:"no_cert_support,omitempty"`
	// crl_support controls whether CRLs are accepted by the log.
	CrlSupport bool `protobuf:"varint,13,opt,name=crl_support,json=crlSupport" json:"crl_support,omitempty"`
}

func (m *LogConfig) Reset()                    { *m = LogConfig{} }
func (m *LogConfig) String() string            { return proto.CompactTextString(m) }
func (*LogConfig) ProtoMessage()               {}
func (*LogConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LogConfig) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

func (m *LogConfig) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *LogConfig) GetRootsPemFile() []string {
	if m != nil {
		return m.RootsPemFile
	}
	return nil
}

func (m *LogConfig) GetPrivateKey() *google_protobuf.Any {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *LogConfig) GetPublicKey() *keyspb.PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *LogConfig) GetRejectExpired() bool {
	if m != nil {
		return m.RejectExpired
	}
	return false
}

func (m *LogConfig) GetExtKeyUsages() []string {
	if m != nil {
		return m.ExtKeyUsages
	}
	return nil
}

func (m *LogConfig) GetNotAfterStart() *google_protobuf1.Timestamp {
	if m != nil {
		return m.NotAfterStart
	}
	return nil
}

func (m *LogConfig) GetNotAfterLimit() *google_protobuf1.Timestamp {
	if m != nil {
		return m.NotAfterLimit
	}
	return nil
}

func (m *LogConfig) GetAcceptOnlyCa() bool {
	if m != nil {
		return m.AcceptOnlyCa
	}
	return false
}

func (m *LogConfig) GetLogBackendName() string {
	if m != nil {
		return m.LogBackendName
	}
	return ""
}

func (m *LogConfig) GetNoCertSupport() bool {
	if m != nil {
		return m.NoCertSupport
	}
	return false
}

func (m *LogConfig) GetCrlSupport() bool {
	if m != nil {
		return m.CrlSupport
	}
	return false
}

// LogMultiConfig wraps up a LogBackendSet and corresponding LogConfigSet so
// that they can easily be parsed as a single proto.
type LogMultiConfig struct {
	// The set of backends that this configuration will use to send requests to.
	// The names of the backends in the LogBackendSet must all be distinct.
	Backends *LogBackendSet `protobuf:"bytes,1,opt,name=backends" json:"backends,omitempty"`
	// The set of logs that will use the above backends. All the protos in this
	// LogConfigSet must set a valid log_backend_name for the config to be usable.
	LogConfigs *LogConfigSet `protobuf:"bytes,2,opt,name=log_configs,json=logConfigs" json:"log_configs,omitempty"`
}

func (m *LogMultiConfig) Reset()                    { *m = LogMultiConfig{} }
func (m *LogMultiConfig) String() string            { return proto.CompactTextString(m) }
func (*LogMultiConfig) ProtoMessage()               {}
func (*LogMultiConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LogMultiConfig) GetBackends() *LogBackendSet {
	if m != nil {
		return m.Backends
	}
	return nil
}

func (m *LogMultiConfig) GetLogConfigs() *LogConfigSet {
	if m != nil {
		return m.LogConfigs
	}
	return nil
}

func init() {
	proto.RegisterType((*LogBackend)(nil), "configpb.LogBackend")
	proto.RegisterType((*LogBackendSet)(nil), "configpb.LogBackendSet")
	proto.RegisterType((*LogConfigSet)(nil), "configpb.LogConfigSet")
	proto.RegisterType((*LogConfig)(nil), "configpb.LogConfig")
	proto.RegisterType((*LogMultiConfig)(nil), "configpb.LogMultiConfig")
}

func init() { proto.RegisterFile("config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 575 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x41, 0x6f, 0xd3, 0x4c,
	0x10, 0x55, 0xbe, 0xb4, 0x69, 0x32, 0x4e, 0xf2, 0xc1, 0x02, 0xc5, 0xf4, 0xd2, 0x10, 0x01, 0x8a,
	0x84, 0xe4, 0xa0, 0x56, 0x15, 0x07, 0x0e, 0xa8, 0x8d, 0x40, 0x42, 0x0d, 0x50, 0x39, 0x70, 0x5e,
	0xd9, 0x9b, 0x89, 0x59, 0xba, 0xf6, 0xae, 0xd6, 0x6b, 0x14, 0x5f, 0xf8, 0x5b, 0xfc, 0x3d, 0xe4,
	0xdd, 0x75, 0xaa, 0x42, 0x0f, 0x9c, 0xec, 0x79, 0xf3, 0xde, 0xe8, 0xcd, 0xec, 0x83, 0x21, 0x93,
	0xc5, 0x86, 0x67, 0x91, 0xd2, 0xd2, 0x48, 0xd2, 0x77, 0x95, 0x4a, 0x8f, 0xce, 0x32, 0x6e, 0xbe,
	0x55, 0x69, 0xc4, 0x64, 0x3e, 0xcf, 0xa4, 0xcc, 0x04, 0xce, 0x8d, 0xe6, 0x42, 0xf0, 0xa4, 0x98,
	0x33, 0x5d, 0x2b, 0x23, 0xe7, 0xd7, 0x58, 0x97, 0x2a, 0xf5, 0x1f, 0x37, 0xe0, 0xe8, 0x89, 0xe7,
	0xda, 0x2a, 0xad, 0x36, 0xf3, 0xa4, 0xa8, 0x7d, 0xeb, 0xf8, 0xcf, 0x96, 0xe1, 0x39, 0x96, 0x26,
	0xc9, 0x95, 0x23, 0x4c, 0x17, 0x00, 0x4b, 0x99, 0x5d, 0x24, 0xec, 0x1a, 0x8b, 0x35, 0x21, 0xb0,
	0x57, 0x24, 0x39, 0x86, 0x9d, 0x49, 0x67, 0x36, 0x88, 0xed, 0x3f, 0x79, 0x0a, 0xc3, 0xd4, 0xb5,
	0x69, 0xa9, 0x90, 0x85, 0xff, 0xd9, 0x5e, 0xe0, 0xb1, 0x95, 0x42, 0x36, 0x7d, 0x0b, 0xa3, 0x9b,
	0x21, 0x2b, 0x34, 0x24, 0x82, 0x03, 0xdf, 0x0f, 0x3b, 0x93, 0xee, 0x2c, 0x38, 0x79, 0x18, 0xb5,
	0x4b, 0x46, 0x37, 0xcc, 0xb8, 0x25, 0x4d, 0xdf, 0xc0, 0x70, 0x29, 0xb3, 0x85, 0xa5, 0x34, 0xfa,
	0x97, 0xd0, 0x73, 0x7c, 0x2f, 0x7f, 0x70, 0x4b, 0xee, 0x78, 0xb1, 0xa7, 0x4c, 0x7f, 0xed, 0xc1,
	0x60, 0x87, 0x92, 0x47, 0xd0, 0x13, 0x32, 0xa3, 0x7c, 0x6d, 0x97, 0xe8, 0xc6, 0xfb, 0x42, 0x66,
	0x1f, 0xd6, 0xe4, 0x10, 0x7a, 0x4a, 0xe3, 0x86, 0x6f, 0xbd, 0x7f, 0x5f, 0x91, 0x67, 0x30, 0xd6,
	0x52, 0x9a, 0x92, 0x2a, 0xcc, 0xe9, 0x86, 0x0b, 0x0c, 0xbb, 0x93, 0xee, 0x6c, 0x10, 0x0f, 0x2d,
	0x7a, 0x85, 0xf9, 0x7b, 0x2e, 0x90, 0x9c, 0x41, 0xa0, 0x34, 0xff, 0x91, 0x18, 0xa4, 0xd7, 0x58,
	0x87, 0x7b, 0x93, 0x8e, 0xdd, 0xc9, 0x1d, 0x37, 0x6a, 0x8f, 0x1b, 0x9d, 0x17, 0x75, 0x0c, 0x9e,
	0x78, 0x89, 0x35, 0x79, 0x05, 0xa0, 0xaa, 0x54, 0x70, 0x66, 0x55, 0xfb, 0x56, 0x75, 0x3f, 0xf2,
	0x6f, 0x77, 0x65, 0x3b, 0x97, 0x58, 0xc7, 0x03, 0xd5, 0xfe, 0x92, 0xe7, 0x30, 0xd6, 0xf8, 0x1d,
	0x99, 0xa1, 0xb8, 0x55, 0x5c, 0xe3, 0x3a, 0xec, 0x4d, 0x3a, 0xb3, 0x7e, 0x3c, 0x72, 0xe8, 0x3b,
	0x07, 0x36, 0xae, 0x71, 0x6b, 0x9a, 0xa9, 0xb4, 0x2a, 0x93, 0x0c, 0xcb, 0xf0, 0xc0, 0xb9, 0xc6,
	0xad, 0xb9, 0xc4, 0xfa, 0xab, 0xc5, 0xc8, 0x05, 0xfc, 0x5f, 0x48, 0x43, 0x93, 0x8d, 0x41, 0x4d,
	0x4b, 0x93, 0x68, 0x13, 0xf6, 0xad, 0x87, 0xa3, 0xbf, 0x9c, 0x7f, 0x69, 0x63, 0x11, 0x8f, 0x0a,
	0x69, 0xce, 0x1b, 0xc5, 0xaa, 0x11, 0xdc, 0x9e, 0x21, 0x78, 0xce, 0x4d, 0x38, 0xf8, 0xf7, 0x19,
	0xcb, 0x46, 0xd0, 0xb8, 0x4d, 0x18, 0x43, 0x65, 0xa8, 0x2c, 0x44, 0x4d, 0x59, 0x12, 0x82, 0x5d,
	0x6a, 0xe8, 0xd0, 0xcf, 0x85, 0xa8, 0x17, 0x09, 0x99, 0xc1, 0xbd, 0xe6, 0xe1, 0xda, 0xac, 0xd9,
	0x1c, 0x06, 0xf6, 0xad, 0xc6, 0x62, 0x17, 0x99, 0x4f, 0x4d, 0x22, 0x5f, 0x34, 0x9e, 0x28, 0x43,
	0x6d, 0x68, 0x59, 0x29, 0x25, 0xb5, 0x09, 0x87, 0xee, 0x4a, 0x85, 0x5c, 0xa0, 0x36, 0x2b, 0x07,
	0x92, 0x63, 0x08, 0x98, 0x16, 0x3b, 0xce, 0xc8, 0x72, 0x80, 0x69, 0xe1, 0x09, 0xd3, 0x9f, 0x30,
	0x5e, 0xca, 0xec, 0x63, 0x25, 0x0c, 0xf7, 0xe9, 0x39, 0x85, 0xbe, 0x37, 0x50, 0xda, 0xfc, 0x04,
	0x27, 0x8f, 0xef, 0x4a, 0xee, 0x0a, 0x4d, 0xbc, 0x23, 0x92, 0xd7, 0x10, 0x34, 0xce, 0x1d, 0xaf,
	0xb4, 0x01, 0x0b, 0x4e, 0x0e, 0xef, 0x88, 0x6c, 0x23, 0x03, 0xd1, 0x56, 0x65, 0xda, 0xb3, 0xb7,
	0x3b, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xe6, 0xbe, 0x11, 0x5e, 0x10, 0x04, 0x00, 0x00,
}
